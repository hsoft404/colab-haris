{"version":3,"sources":["../node_modules/encoding/lib sync","helpers/file.js","models/dialogs.js","actions/dialogs.js","actions/messages.js","actions/selectedDialog.js","actions/users.js","actions/currentUser.js","reducers/reducer-function.js","reducers/index.js","reducers/currentUser.js","reducers/dialogs.js","reducers/selectedDialog.js","reducers/messages.js","reducers/users.js","store.js","models/message.js","models/user.js","helpers/constants.js","services/chat-service.js","services/auth-service.js","helpers/loader/loader.js","components/auth/auth.js","helpers/avatar/avatar.js","components/home/sideBar/userProfile/userProfile.js","helpers/LayoutUtil.js","helpers/lastDate.js","components/home/sideBar/dialogs/dialogs.js","components/home/sideBar/sideBar.js","helpers/imagePicker/cropImage.js","helpers/imagePicker/imagePicker.js","components/home/chat/chatInput/chatInput.js","services/users-service.js","components/home/chat/message/messageStatus.js","components/home/chat/message/message.js","components/home/chat/chat.js","components/home/splashPage/splashPage.js","components/home/createDialog/createDialogHeader/header.js","components/home/createDialog/renderUser/renderUser.js","components/home/createDialog/createDialog.js","components/home/home.js","components/main.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","getImageLinkFromUID","uid","ConnectyCube","storage","privateUrl","Dialog","dialog","this","_id","type","xmpp_room_jid","xmpp_type","name","photo","getAvatarUrl","description","destination","room_jid","user_id","admins_ids","occupants_ids","updated_date","Date","parse","updated_at","now","last_message_date_sent","created_at","last_message","last_message_id","last_message_user_id","unread_messages_count","unread_messages_ids","pinned_messages_ids","avatarUID","FETCH_DIALOGS","ADD_DIALOG","SORT_DIALOGS","UPDATE_DIALOG","DELETE_DIALOG","fetchDialogs","dialogs","updateDialog","addNewDialog","sortDialogs","message","count","FETCH_MESSAGES","PUSH_MESSAGE","DELETE_ALL_MESSAGES","LAZY_FETCH_MESSAGES","UPDATE_MESSAGES","updateMessages","dialogId","msgId","msg","pushMessage","SELECTED_DIALOG","UN_SELECTED_DIALOG","FETCH_USERS","fetchUsers","users","SET_CURRENT_USER","RESET_CURRENT_USER","UPDATE_CURRENT_USER","setCurrentUser","currentUser","action","alreadyUpdatedDialog","map","elem","Object","assign","lazyFetchMessages","messages","newArr","history","reverse","concat","sortedDialog","result","items","inverted","sort","itemA","itemB","dialog_id","newObj","body","date_sent","updateStatusMessages","length","newMessages","index","updateSendStatus","send_state","newObjUsers","forEach","appReducer","combineReducers","user","filter","selectedDialog","reverted","mergedUpdatedMessages","rootReducer","state","store","createStore","GROUP_CHAT_ALERT_TYPE","defaultMessage","Math","floor","attachments","sender_id","sender","Message","group_chat_alert_type","chat_dialog_id","extension","getSendState","attachment","getAttachment","parseLink","url","read_ids","find","delivered_ids","FakeMessage","undefined","User","avatar","login","custom_data","full_name","phone","last_request_at","DIALOG_TYPE","chatService","getMoreMessages","a","currentMessages","getMessagesByDialogId","lastMessageDate","updateObj","last_messages_for_fetch","lt","sort_desc","chat","list","moreHistoryFromServer","push","dispatch","amountMessages","sendMsgChatAlertOnCreate","alertType","date","recipient_id","messageExtensions","save_to_history","send","updateDialogsUnreadMessagesCount","onMessageListener","bind","onSentMessageCallback","onSentMessageListener","onDeliveredStatusListener","onDeliveredStatus","onReadStatusListener","onReadStatus","getState","dialogsFromServer","currentUserId","privatChatIdsUser","console","log","getUsersList","usersInfo","isAlredyUpdate","isAlreadyMessageFetch","historyFromServer","firstUnreadMsg","readAllMessages","sendReadStatus","messageText","scrollToBottom","text","trim","messageUniqueId","sendMessageAsAttachment","newObjFreez","freeze","URL","createObjectURL","file","uploadPhoto","response","newObjAttach","size","content_type","userId","params","create","getUserFromReduxById","getUserFromServerById","UserModel","groupName","img","unshift","image","newDialog","update","read","messageId","senderId","getSelectedDialog","readMessage","message_id","sendDeliveredStatus","failedMessage","warn","ids","get","per_page","field","param","value","usersList","createAndUpload","helpers","getBsonObjectId","AuthService","init","appConfig","connectyCubeConfig","autologin","getUserSession","checkUserSessionFromStore","data","JSON","signIn","password","createSession","session","customSession","setUserSession","connect","signup","userSession","localStorage","setItem","CURRENT_USER_SESSION_KEY","stringify","getItem","clear","logout","DEVICE_TOKEN_KEY","authService","Loader","className","Component","Auth","isLogin","isLoader","isAuthorization","handleStateModal","setState","changeName","event","target","changeLogin","changePassword","preventDefault","dataUser","then","catch","error","swal","signUp","endMessage","authText","authLink","style","props","isSmallDevice","backgroundColor","height","to","align","onSubmit","onChange","required","placeholder","onClick","Avatar","width","borderRadius","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","colors","randomizeColor","fontSize","words","split","slice","getIconLabel","toUpperCase","UserProfile","customStyles","content","top","left","right","bottom","transform","border","padding","showMoreInformation","isModal","handleCloseModal","logOut","settings","alert","icon","faChevronUp","color","faChevronDown","isOpen","onRequestClose","ariaHideApp","overlayClassName","DialogLayoutUtil","LayoutProvider","dim","ChatLayoutUtil","maxWidth","GetMaxWidthMsg","arr","maxWidthMsg","currentSender","otherSender","ctx","document","createElement","getContext","font","txt","calcWidth","measureText","lines","ceil","maxScrollWidth","getTime","dateSent","hours","getHours","minutes","getMinutes","scrollWidth","scrollHeight","listenerWindowSize","timer","allDialog","handleResize","getElementById","clientWidth","clientHeight","setTimeout","clearTimeout","isAlredy","layoutProvider","getDialogLayoutProvider","changeSearch","includes","search","dataProvider","cloneWithRows","goToChat","item","router","ChatService","setSelectDialog","createNewDialog","_renderDialog","lastDate","lastMessage","updatedDate","monthes","msgLastDate","msgYear","getFullYear","msgMonth","getMonth","msgDate","getDate","msgDay","getDay","msgHours","msgMinutes","LastDate","curYear","curMonth","curDate","curDay","DataProvider","r1","r2","window","addEventListener","fetchDialogsFromServer","prevProps","removeEventListener","faUserPlus","faSearch","position","_data","rowRenderer","SideBar","createImage","Promise","reject","Image","setAttribute","src","getRadianAngle","degreeValue","PI","getCroppedImg","imageSrc","pixelCrop","rotation","canvas","maxSize","max","safeArea","sqrt","translate","rotate","drawImage","getImageData","putImageData","x","y","toBlob","newFile","File","imageInfo","public","link","boxShadow","ImagePicker","croppedAreaPixels","cropedImage","onCropChange","crop","onCropComplete","croppedArea","cropImage","getImage","onZoomChange","zoom","handleOpenModal","onImageChange","files","_renderAvatarPicker","htmlFor","alt","faCamera","_renderAttachmentPicker","faPaperclip","aspect","pickAsAttachment","ChatInput","changeMessage","sendMessage","sendMessageCallback","faPaperPlane","PureComponent","getUsers","idsForFetch","usersFromServer","newUsers","usersIdsToIgnore","allUsers","contacts","MessageSendState","faClock","faCheck","faCheckDouble","selectedImg","_renderAsStr","whoIsSender","wordWrap","renderZoomImg","_renderAsAttachment","cursor","participantInfo","notRenderAvatar","widthScroll","withMsg","faTimesCircle","Chat","isFetchingMsg","messagesListRef","listenerLazyLoad","needToGetMoreMessage","recycler_Y","contentHeight","contentNewOffset","lazyLoadMessages","nativeEvent","contentSize","getDialogInfo","getDialogById","UsersService","getOccupants","getMessages","getChatLayoutProvider","currentUserInfo","updateScrollPosition","getElement","children","fullScrollHeight","newOffset","scrollToOffset","goToSplashPage","_renderMessage","scrollToIndex","prewProps","currentDialog","innerWidth","faChevronLeft","ref","onScroll","SplashPage","createDialogHeader","isSelectedUser","selectUsers","selectedUsers","dialogType","toggleUserSelect","faCheckCircle","faDotCircle","faArrowRight","CreateDialog","listUsers","userNotFound","isGroupDetails","isUpdate","createDialog","str","dialogName","createPublicDialog","sendChatAlertOnCreate","searchUsers","keyword","listUsersByFullName","changeTypeDialog","createPrivateDialog","_renderUser","isSelected","key","changeDialogName","_renderSelectedUsers","renderHeader","calHeight","faUsers","faUser","Home","changeRouter","routerUrl","routName","match","replace","windowWidth","setUpListeners","Row","Col","sm","md","lg","xl","exact","path","component","Main","initUser","routLink","Boolean","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.348feddc.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 277;","import ConnectyCube from 'connectycube'\n\nexport function getImageLinkFromUID(uid) {\n  if (!uid) {\n    return null\n  }\n  return ConnectyCube.storage.privateUrl(uid)\n}\n\n\nexport function preparationAttachment(file) {\n  return {\n    size: file.size,\n    uid: file.uid,\n    type: file.content_type,\n    name: file.name,\n  }\n}\n","import { getImageLinkFromUID } from '../helpers/file'\n\nexport default class Dialog {\n  constructor(dialog) {\n    this.id = dialog._id || dialog.id\n    this.type = dialog.type\n    this.xmpp_room_jid = dialog.xmpp_room_jid\n    this.xmpp_type = dialog.type === 3 ? 'chat' : dialog.type ? 'groupchat' : ''\n    this.name = dialog.name\n    this.photo = Dialog.getAvatarUrl(dialog.photo)\n    this.description = dialog.description\n    this.destination = dialog.xmpp_room_jid || dialog.room_jid\n    this.user_id = dialog.user_id\n    this.admins_ids = dialog.admins_ids\n    this.occupants_ids = dialog.occupants_ids\n    this.updated_date = Date.parse(dialog.updated_at) || Date.now()\n    this.last_message_date_sent = dialog.last_message_date_sent || Date.parse(dialog.updated_at) / 1000 || Date.parse(dialog.created_at) / 1000\n    this.last_message = dialog.last_message || ''\n    this.last_message_id = dialog.last_message_id\n    this.last_message_user_id = dialog.last_message_user_id\n    this.unread_messages_count = dialog.unread_messages_count\n    this.unread_messages_ids = dialog.unread_messages_ids\n    this.pinned_messages_ids = dialog.pinned_messages_ids\n  }\n\n  static getAvatarUrl(avatarUID) {\n    return getImageLinkFromUID(avatarUID)\n  }\n}\n","export const FETCH_DIALOGS = 'FETCH_DIALOGS'\nexport const ADD_DIALOG = 'ADD_DIALOG'\nexport const SORT_DIALOGS = 'SORT_DIALOGS'\nexport const UPDATE_DIALOG = 'UPDATE_DIALOG'\nexport const DELETE_DIALOG = 'DELETE_DIALOG'\n\nexport const fetchDialogs = dialogs => ({ type: FETCH_DIALOGS, dialogs: dialogs })\nexport const updateDialog = dialog => ({ type: UPDATE_DIALOG, dialog })\nexport const addNewDialog = dialog => ({ type: ADD_DIALOG, dialog: dialog })\nexport const sortDialogs = (message, count) => ({ type: SORT_DIALOGS, message: message, count: count })\nexport const deleteDialog = dialogId => ({ type: DELETE_DIALOG, dialogId })\n","export const FETCH_MESSAGES = 'FETCH_MESSAGES'\nexport const PUSH_MESSAGE = 'PUSH_MESSAGE'\nexport const DELETE_ALL_MESSAGES = 'DELETE_ALL_MESSAGES'\nexport const LAZY_FETCH_MESSAGES = 'LAZY_FETCH_MESSAGES'\nexport const UPDATE_MESSAGES = 'UPDATE_MESSAGES'\n\nexport const fetchMessages = (dialogId, history) => ({ type: FETCH_MESSAGES, dialogId, history })\nexport const lazyFetchMessages = (dialogId, history) => ({ type: LAZY_FETCH_MESSAGES, dialogId, history })\nexport const updateMessages = (dialogId, msgId, msg) => ({ type: UPDATE_MESSAGES, dialogId, msgId, msg })\nexport const pushMessage = (message, dialogId) => ({ type: PUSH_MESSAGE, message, dialogId })\nexport const deleteAllMessages = dialogId => ({ type: DELETE_ALL_MESSAGES, dialogId })","export const SELECTED_DIALOG = 'SELECTED_DIALOG'\nexport const UN_SELECTED_DIALOG = 'UN_SELECTED_DIALOG'\n\nexport const selectedDialog = dialog => ({ type: SELECTED_DIALOG, dialog })\nexport const unSelectedDialog = dialog => ({ type: UN_SELECTED_DIALOG, dialog })","export const FETCH_USERS = 'FETCH_USERS'\nexport const ADD_USERS = 'ADD_USERS'\n\n\nexport const fetchUsers = users => ({ type: FETCH_USERS, users })\nexport const addUsers = users => ({ type: ADD_USERS, users })\n","export const SET_CURRENT_USER = 'SET_CURRENT_USER'\nexport const RESET_CURRENT_USER = 'RESET_CURRENT_USER'\nexport const UPDATE_CURRENT_USER = 'UPDATE_CURRENT_USER'\n\nexport const setCurrentUser = currentUser => ({ type: SET_CURRENT_USER, currentUser })\nexport const resetCurrentUser = () => ({ type: RESET_CURRENT_USER })\nexport const updateCurrentUser = currentUser => ({ type: UPDATE_CURRENT_USER, currentUser })\n","const updateDialog = (action, dialogs) => {\n  const alreadyUpdatedDialog = dialogs.map(elem => {\n    if (elem.id === action.dialog.id) {\n      return Object.assign(elem, action.dialog)\n    } return elem\n  })\n  return [...alreadyUpdatedDialog]\n}\n\nconst lazyFetchMessages = (action, messages) => {\n  const newArr = action.history.reverse().concat(messages[action.dialogId])\n  return { ...{}, [action.dialogId]: newArr }\n}\n\nconst sortedDialog = (action, dialogs) => {\n  const { message, count } = action\n  const updateDialog = dialogs.map(elem => {\n    if (elem.id === message.dialog_id) {\n      const newObj = {\n        last_message: message.body,\n        last_message_date_sent: message.date_sent,\n        updated_date: message.date_sent,\n        unread_messages_count: count ? elem.unread_messages_count += 1 : elem.unread_messages_count\n      }\n      return Object.assign(elem, newObj)\n    } return elem\n  })\n\n  const sort = (items, inverted = false) => items.sort((itemA, itemB) => {\n    const result = new Date(itemB.last_message_date_sent * 1000) - new Date(itemA.last_message_date_sent * 1000)\n    return inverted ? !result : result\n  })\n\n\n  const result = sort(updateDialog)\n\n  return [...result]\n}\n\nconst updateStatusMessages = (action, message) => {\n  if (Object.keys(message).length === 0) {\n    return message\n  }\n\n  const newMessages = message[action.dialogId].map((elem, index) => {\n    if (elem.id === action.msgId) {\n      const updateSendStatus = { ...elem }\n      updateSendStatus.send_state = action.msg.send_state\n      return { ...updateSendStatus }\n    }\n    return elem\n  })\n\n  const result = { ...message, [action.dialogId]: newMessages }\n\n  return result\n}\n\nconst fetchUsers = (action, users) => {\n  const newObjUsers = {}\n  action.forEach(elem => {\n    newObjUsers[elem.id] = elem\n  })\n  return { ...users, ...newObjUsers }\n}\n\nexport {\n  updateDialog,\n  lazyFetchMessages,\n  sortedDialog,\n  updateStatusMessages,\n  fetchUsers\n}","import { combineReducers } from 'redux'\nimport currentUser from './currentUser'\nimport dialogs from './dialogs'\nimport selectedDialog from './selectedDialog'\nimport messages from './messages'\nimport users from './users'\n\nconst appReducer = combineReducers({\n  currentUser,\n  dialogs,\n  selectedDialog,\n  messages,\n  users,\n})\n\n\nexport const LogOut = () => ({ type: 'RESSET_STORE' })\n\nconst rootReducer = (state, action) => {\n  if (action.type === 'RESSET_STORE') {\n    state = {}\n  }\n  return appReducer(state, action)\n}\n\n\nexport default rootReducer","import {\n  SET_CURRENT_USER,\n  UPDATE_CURRENT_USER,\n  RESET_CURRENT_USER\n} from '../actions/currentUser'\n\nexport default (currentUser = null, action) => {\n  switch (action.type) {\n    case SET_CURRENT_USER:\n      return action.currentUser\n\n    case UPDATE_CURRENT_USER: {\n      const result = Object.assign(currentUser.user, action.currentUser)\n      currentUser.user = result\n      return { ...currentUser }\n    }\n\n    case RESET_CURRENT_USER:\n      return null\n\n    default:\n      return currentUser\n  }\n}","import {\n  FETCH_DIALOGS,\n  ADD_DIALOG,\n  SORT_DIALOGS,\n  UPDATE_DIALOG,\n  DELETE_DIALOG\n} from '../actions/dialogs'\nimport { updateDialog, sortedDialog } from './reducer-function'\n\nexport default (dialogs = [], action) => {\n  switch (action.type) {\n    case FETCH_DIALOGS:\n      return action.dialogs\n\n    case UPDATE_DIALOG: {\n      const result = updateDialog(action, dialogs)\n      return result\n    }\n\n    case ADD_DIALOG:\n      return [action.dialog, ...dialogs]\n\n    case SORT_DIALOGS: {\n      const result = sortedDialog(action, dialogs)\n      return result\n    }\n\n    case DELETE_DIALOG: {\n      const result = dialogs.filter(dialog => dialog.id !== action.dialogId)\n      return result\n    }\n\n    default:\n      return dialogs\n  }\n}","import {\n  SELECTED_DIALOG,\n  UN_SELECTED_DIALOG\n} from '../actions/selectedDialog'\n\nexport default (dialog = null, action) => {\n  switch (action.type) {\n    case SELECTED_DIALOG: {\n      return { ...action.dialog }\n    }\n\n    case UN_SELECTED_DIALOG: {\n      return {}\n    }\n\n    default:\n      return dialog\n  }\n}","import {\n  PUSH_MESSAGE,\n  FETCH_MESSAGES,\n  DELETE_ALL_MESSAGES,\n  LAZY_FETCH_MESSAGES,\n  UPDATE_MESSAGES\n} from '../actions/messages'\n\nimport { lazyFetchMessages, updateStatusMessages } from './reducer-function'\n\nexport default (messages = {}, action) => {\n  switch (action.type) {\n    case FETCH_MESSAGES: {\n      const reverted = action.history\n      return { ...messages, [action.dialogId]: reverted.reverse() }\n    }\n\n    case LAZY_FETCH_MESSAGES: {\n      const result = lazyFetchMessages(action, messages)\n      return result\n    }\n\n    case UPDATE_MESSAGES: {\n      const mergedUpdatedMessages = updateStatusMessages(action, messages)\n      return mergedUpdatedMessages\n    }\n\n    case PUSH_MESSAGE: {\n      return {\n        ...messages,\n        [action.dialogId]: [...messages[action.dialogId] || [], action.message]\n      }\n    }\n\n    case DELETE_ALL_MESSAGES: {\n      return {\n        ...messages,\n        [action.dialogId]: []\n      }\n    }\n\n    default:\n      return messages\n  }\n}","import {\n  FETCH_USERS,\n} from '../actions/users'\n\nimport { fetchUsers } from './reducer-function'\n\nexport default (users = {}, action) => {\n  switch (action.type) {\n    case FETCH_USERS: {\n      return fetchUsers(action.users, users);\n      console.log(\"user:\"+ users)\n    }\n\n    default: {\n      return users\n      console.log(\"user:\"+ users)\n    }\n  }\n}","import { createStore } from 'redux'\nimport rootReducer from './reducers'\n\nconst store = createStore(rootReducer)\n\nexport default store","import { getImageLinkFromUID } from '../helpers/file'\n\nexport const STATUS_PENDING = 0\nexport const STATUS_SENT = 1\nexport const STATUS_DELIVERED = 2\nexport const STATUS_READ = 3\n\nexport const GROUP_CHAT_ALERT_TYPE = {\n  CREATE: \"create\"\n}\n\nconst defaultMessage = {\n  id: '',\n  body: '',\n  dialog_id: '',\n  date_sent: Math.floor(Date.now() / 1000),\n  attachments: null,\n  sender_id: null,\n  sender: null\n}\n\nexport class Message {\n  constructor(msg = defaultMessage, currentUser) {\n    this.id = msg.id || msg._id\n    this.body = msg.body || msg.message\n    this.group_chat_alert_type = msg.group_chat_alert_type || null\n    this.dialog_id = msg.chat_dialog_id || (msg.extension && msg.extension.dialog_id)\n    this.date_sent = msg.date_sent || (msg.extension && msg.extension.date_sent) || Math.floor(Date.now() / 1000)\n    this.send_state = Message.getSendState(msg, currentUser)\n    this.attachment = Message.getAttachment(msg)\n    this.sender_id = msg.sender_id || (msg.extension && msg.extension.sender_id)\n    this.sender = msg.sender_id\n  }\n\n  static getAttachment(msg) {\n    if (msg.attachments && msg.attachments.length > 0) {\n      const attachments = { ...msg.attachments[0] }\n      const parseLink = getImageLinkFromUID(msg.attachments[0].uid)\n      attachments.url = parseLink\n      return [attachments]\n    } else if (msg?.extension?.attachments && msg.extension.attachments.length > 0) {\n      const attachments = { ...msg.extension.attachments[0] }\n      const parseLink = getImageLinkFromUID(msg.extension.attachments[0].uid)\n      attachments.url = parseLink\n      return [attachments]\n    } else return null\n  }\n\n  static getSendState(msg, currentUser) {\n    if (msg?.read_ids?.find(_id => _id !== currentUser)) {\n      return STATUS_READ\n    }\n    if (msg?.delivered_ids?.find(msg => msg.delivered_ids !== currentUser)) {\n      return STATUS_DELIVERED\n    }\n    return STATUS_PENDING\n  }\n\n}\n\nexport class FakeMessage {\n  constructor(msg) {\n    this.attachment = msg.extension.attachments\n    this.body = msg.body\n    this.date_sent = msg.extension.date_sent\n    this.dialog_id = msg.extension.dialog_id\n    this.id = msg.id\n    this.send_state = 0\n    this.sender = undefined\n    this.sender_id = msg.extension.sender_id\n  }\n}","import { getImageLinkFromUID } from '../helpers/file'\n\nexport default class User {\n\n  constructor(user) {\n    this.id = user.id\n    this.avatar = User.getAvatarUrl(user.avatar)\n    this.login = user.login\n    this.custom_data = user.custom_data ? user.custom_data : ''\n    this.full_name = user.full_name || user.login\n    this.phone = user.phone\n    this.created_at = user.created_at\n    this.updated_at = user.updated_at\n    this.last_request_at = user.last_request_at\n  }\n  static getAvatarUrl(avatarUID) {\n    return getImageLinkFromUID(avatarUID)\n  }\n}\n","export const BTN_TYPE = {\n  DIALOG: 1,\n  CONTACTS: 2,\n  CREATE_GROUP: 3,\n}\n\nexport const DIALOG_TYPE = {\n  PRIVATE: 3,\n  GROUP: 2,\n  BROADCAST: 1,\n  PUBLIC_CHANNEL: 4\n}","import ConnectyCube from 'connectycube'\nimport Dialog from '../models/dialogs'\nimport {\n  fetchDialogs,\n  sortDialogs,\n  updateDialog,\n  addNewDialog,\n} from '../actions/dialogs'\nimport {\n  pushMessage,\n  fetchMessages,\n  lazyFetchMessages,\n  updateMessages,\n} from '../actions/messages'\nimport { preparationAttachment } from '../helpers/file'\nimport { selectedDialog } from '../actions/selectedDialog'\nimport { fetchUsers } from '../actions/users'\nimport store from '../store'\nimport { Message, FakeMessage } from '../models/message'\nimport UserModel from '../models/user'\nimport { DIALOG_TYPE } from '../helpers/constants'\nimport {\n  STATUS_DELIVERED,\n  STATUS_READ,\n  STATUS_SENT,\n  GROUP_CHAT_ALERT_TYPE\n} from '../models/message'\n\nclass ChatService {\n       \n  setUpListeners() {\n    ConnectyCube.chat.onMessageListener = this.onMessageListener.bind(this)\n    ConnectyCube.chat.onSentMessageCallback = this.onSentMessageListener.bind(this)\n    ConnectyCube.chat.onDeliveredStatusListener = this.onDeliveredStatus.bind(this)\n    ConnectyCube.chat.onReadStatusListener = this.onReadStatus.bind(this)\n  }\n\n  async fetchDialogsFromServer() {\n    if (store.getState().dialogs.length !== 0) {\n      return store.getState().dialogs\n    }\n    const dialogsFromServer = await ConnectyCube.chat.dialog.list()\n    const currentUserId = this.currentUser;\n    \n    let privatChatIdsUser = []\n    console.log(currentUserId);\n    const dialogs = dialogsFromServer.items.map(elem => {\n      if (elem.type === DIALOG_TYPE.PRIVATE) {\n        elem.occupants_ids.forEach(elem => {\n          elem !== currentUserId.id && privatChatIdsUser.push(elem)\n        })\n      }\n      return new Dialog(elem)\n    })\n \n    if (privatChatIdsUser.length !== 0) {\n      const usersInfo = await this.getUsersList(privatChatIdsUser)\n      store.dispatch(fetchUsers(usersInfo))\n  ;\n\n\n      \n    }\n\n    store.dispatch(fetchDialogs(dialogs))\n    return store.getState().dialogs\n  }\n\n  async getMessages(dialog) {\n    const isAlredyUpdate = this.getMessagesByDialogId(dialog.id)\n    let amountMessages = null\n    \n\n\n    // If the first entry into the chat\n    if (!dialog.isAlreadyMessageFetch || dialog.unread_messages_count > 0 && !dialog.isAlreadyMessageFetch) {\n      const historyFromServer = await ConnectyCube.chat.message.list({\n        chat_dialog_id: dialog.id,\n        sort_desc: 'date_sent'\n      })\n\n      const messages = []\n      historyFromServer.items.forEach(elem => {\n        if (!elem.group_chat_alert_type) {\n          messages.push(new Message(elem, this.currentUser.id))\n        }\n      })\n\n      const newObj = Object.assign(dialog, { isAlreadyMessageFetch: true })\n      this.updateDialogsUnreadMessagesCount(newObj)\n      store.dispatch(fetchMessages(dialog.id, messages))\n      amountMessages = messages.length\n    } else {\n      // If the second entry into the chat\n      if (dialog.unread_messages_count > 0) {\n        const messages = this.getMessagesByDialogId(dialog.id)\n        const firstUnreadMsg = messages[dialog.unread_messages_count - 1]\n        this.readAllMessages(dialog.id)\n        await this.sendReadStatus(firstUnreadMsg.id, firstUnreadMsg.sender_id, firstUnreadMsg.dialog_id)\n        this.updateDialogsUnreadMessagesCount(dialog)\n      }\n      amountMessages = isAlredyUpdate.length\n    }\n    return amountMessages\n  }\n\n  // Message loading if more than 100\n  getMoreMessages = async (dialog) => {\n    const currentMessages = this.getMessagesByDialogId(dialog.id)\n    const lastMessageDate = currentMessages[0]\n    const updateObj = Object.assign(dialog, { last_messages_for_fetch: lastMessageDate.date_sent })\n\n    const filter = {\n      chat_dialog_id: dialog.id,\n      date_sent: { lt: lastMessageDate.date_sent },\n      sort_desc: 'date_sent'\n    }\n\n    const moreHistoryFromServer = await ConnectyCube.chat.message.list(filter)\n\n    const messages = []\n    moreHistoryFromServer.items.forEach(elem => {\n      if (!elem.group_chat_alert_type) {\n        messages.push(new Message(elem, this.currentUser.id))\n      }\n    })\n\n    store.dispatch(updateDialog(updateObj))\n    const amountMessages = store.dispatch(lazyFetchMessages(dialog.id, messages))\n    return amountMessages.history.length\n  }\n\n\n  async sendMessage(dialog, messageText, attachments = false, scrollToBottom) {\n    const user = this.currentUser\n    const text = messageText.trim()\n    const date = Math.floor(Date.now() / 1000)\n    const recipient_id = dialog.type === DIALOG_TYPE.PRIVATE ? dialog.occupants_ids.find(elem => elem != user.id)\n      : dialog.xmpp_room_jid\n\n    let msg = {\n      type: dialog.xmpp_type,\n      body: text,\n      extension: {\n        save_to_history: 1,\n        dialog_id: dialog.id,\n        sender_id: user.id,\n        date_sent: date,\n      },\n      // markable: 1\n    }\n\n    msg.id = this.messageUniqueId\n\n    // If send message as Attachment\n    if (attachments) {\n      return this.sendMessageAsAttachment(dialog, recipient_id, msg, attachments, scrollToBottom)\n    }\n\n    const message = new FakeMessage(msg)\n\n    const newObjFreez = Object.freeze(message)\n\n    await store.dispatch(pushMessage(newObjFreez, dialog.id))\n    scrollToBottom()\n    ConnectyCube.chat.send(recipient_id, msg)\n    store.dispatch(sortDialogs(newObjFreez))\n  }\n\n\n  sendMsgChatAlertOnCreate = async (dialog, message, alertType) => {\n    const date = Math.floor(Date.now() / 1000)\n    const recipient_id = dialog.type === DIALOG_TYPE.PRIVATE ? dialog.occupants_ids.find(elem => elem != this.currentUser.id)\n      : dialog.xmpp_room_jid\n    const messageExtensions = {\n      date_sent: date,\n      save_to_history: 1,\n      dialog_id: dialog.id,\n      group_chat_alert_type: alertType,\n      sender_id: this.currentUser.id,\n    }\n    const msg = {\n      type: !dialog.xmpp_room_jid ? 'chat' : 'groupchat',\n      body: message,\n      extension: messageExtensions,\n    }\n    ConnectyCube.chat.send(recipient_id, msg)\n  }\n\n  sendChatAlertOnCreate(dialog) {\n    const message = 'Group is created'\n    this.sendMsgChatAlertOnCreate(dialog, message, GROUP_CHAT_ALERT_TYPE.CREATE)\n  }\n\n  async sendMessageAsAttachment(dialog, recipient_id, msg, attachments, scrollToBottom) {\n    //create fake data for render img\n    const url = URL.createObjectURL(attachments.file)\n    msg.extension.attachments = [{ url }]\n    msg.body = 'Image attachment'\n    const message = new FakeMessage(msg)\n    await store.dispatch(pushMessage(message, dialog.id))\n    scrollToBottom()\n\n    // create real data for attachment\n    const response = await this.uploadPhoto(attachments)\n    const newObjAttach = preparationAttachment(response)\n    msg.extension.attachments = [newObjAttach]\n    await ConnectyCube.chat.send(recipient_id, msg)\n    store.dispatch(sortDialogs(message))\n    return\n  }\n\n  async createPrivateDialog(userId) {\n    const dialogs = store.getState().dialogs\n    let dialog = null\n\n    dialogs.forEach(elem => {\n      if (elem.type === DIALOG_TYPE.PRIVATE && elem.occupants_ids.find(elem => elem === userId)) {\n        dialog = elem\n      }\n    })\n\n    if (!dialog) {\n      const params = {\n        type: DIALOG_TYPE.PRIVATE,\n        occupants_ids: userId,\n      }\n\n      const response = await ConnectyCube.chat.dialog.create(params)\n      dialog = new Dialog(response)\n      if (this.getUserFromReduxById(userId)) {\n        store.dispatch(addNewDialog(dialog))\n        return dialog\n      } else {\n        const usersInfo = await this.getUserFromServerById(userId)\n        usersInfo.user = new UserModel(usersInfo.user)\n        store.dispatch(fetchUsers([usersInfo.user]))\n        store.dispatch(addNewDialog(dialog))\n        return dialog\n      }\n    }\n\n    // If the user is already in the Redux\n    if (this.getUserFromReduxById(userId)) {\n      return dialog\n    } else {\n      const usersInfo = await this.getUserFromServerById(userId)\n      usersInfo.user = new UserModel(usersInfo.user)\n      store.dispatch(fetchUsers([usersInfo.user]))\n      return dialog\n    }\n  }\n\n\n  updateDialogsUnreadMessagesCount = (dialog) => {\n    const updateObj = Object.assign(dialog, { unread_messages_count: 0 })\n    store.dispatch(updateDialog(updateObj))\n    return true\n  }\n\n  async createPublicDialog(occupants_ids, groupName, img) {\n    const currentUser = this.currentUser\n    occupants_ids.unshift(currentUser.id)\n    const params = {\n      type: DIALOG_TYPE.GROUP,\n      occupants_ids,\n      name: groupName,\n    }\n    const image = img ? await this.uploadPhoto(img) : null\n    if (image) {\n      params.photo = image.uid\n    }\n    const dialog = await ConnectyCube.chat.dialog.create(params)\n    const newDialog = new Dialog(dialog)\n    store.dispatch(addNewDialog(newDialog))\n    return newDialog\n  }\n\n  async readAllMessages(dialogId) {\n    return ConnectyCube.chat.message.update(null, {\n      chat_dialog_id: dialogId,\n      read: 1\n    })\n  }\n\n  async readMessage(messageId, dialogId) {\n    this.onReadStatus(messageId, dialogId)\n    return ConnectyCube.chat.message.update(null, {\n      chat_dialog_id: dialogId,\n      read: 1\n    })\n  }\n\n  async onMessageListener(senderId, msg) {\n    const message = new Message(msg)\n    const user = this.currentUser\n    const dialog = this.getSelectedDialog()?.id\n\n    // If group chat alet\n    if (msg.extension.group_chat_alert_type) {\n      const dialogsFromServer = await ConnectyCube.chat.dialog.list()\n      const dialogs = dialogsFromServer.items.map(elem => {\n        return new Dialog(elem)\n      })\n      store.dispatch(fetchDialogs(dialogs))\n      return\n    }\n\n    if (senderId !== user.id) {\n      if (dialog === message.dialog_id) {\n        store.dispatch(sortDialogs(message))\n        this.readMessage(message.id, message.dialog_id)\n        this.sendReadStatus(msg.extension.message_id, msg.extension.sender_id, msg.dialog_id)\n      } else {\n        this.sendDeliveredStatus(msg.extension.message_id, msg.extension.sender_id, msg.dialog_id)\n        store.dispatch(sortDialogs(message, true))\n      }\n      store.dispatch(pushMessage(message, message.dialog_id))\n    }\n  }\n\n  // ConnectyCube listeners\n  onSentMessageListener(failedMessage, msg) {\n    console.warn('onSentMessageListener')\n    if (failedMessage || msg.extension.group_chat_alert_type) {\n      return\n    }\n    store.dispatch(updateMessages(msg.extension.dialog_id, msg.id, { send_state: STATUS_SENT }))\n  }\n\n  onDeliveredStatus(messageId, dialogId, userId) {\n    console.warn('onDeliveredStatus', messageId)\n    store.dispatch(updateMessages(dialogId, messageId, { send_state: STATUS_DELIVERED }))\n  }\n\n  onReadStatus(messageId, dialogId, userId) {\n    console.warn('onReadStatus', messageId)\n    store.dispatch(updateMessages(dialogId, messageId, { send_state: STATUS_READ }))\n  }\n\n\n\n  sendReadStatus(messageId, userId, dialogId) {\n    ConnectyCube.chat.sendReadStatus({ messageId, userId, dialogId })\n  }\n\n  sendDeliveredStatus(messageId, userId, dialogId) {\n    ConnectyCube.chat.sendDeliveredStatus({ messageId, userId, dialogId })\n  }\n\n  async getUsersList(ids) {\n    const usersList = await ConnectyCube.users.get({\n      per_page: 100,\n      filter: {\n        field: 'id', param: 'in', value: ids,\n      },\n    })\n\n    return usersList.items.map(elem => {\n      return new UserModel(elem.user)\n    })\n  }\n\n  async getUserFromServerById(id) {\n    return ConnectyCube.users.get(id)\n  }\n\n  setSelectDialog(dialog) {\n    store.dispatch(selectedDialog(dialog))\n  }\n\n  getSelectedDialog() {\n    return store.getState().selectedDialog\n  }\n\n  getDialogById(dialogId) {\n    return store.getState().dialogs.find(elem => elem.id === dialogId)\n  }\n\n  getMessagesByDialogId(dialogId) {\n    const result = store.getState().messages\n    return result[dialogId]\n  }\n\n  async uploadPhoto(file) {\n    return ConnectyCube.storage.createAndUpload(file)\n  }\n\n  get currentUser() {\n    return store.getState().currentUser.user\n  }\n\n  getUserFromReduxById(id) {\n    return store.getState().users[id]\n  }\n\n  get messageUniqueId() {\n    return ConnectyCube.chat.helpers.getBsonObjectId()\n  }\n}\n\n\nconst chatService = new ChatService()\n\nObject.freeze(chatService)\n\nexport default chatService\n\n","import ConnectyCube from 'connectycube'\nimport appConfig from '../appConfig.json'\nimport User from '../models/user'\nimport store from '../store'\nimport { setCurrentUser } from '../actions/currentUser'\nimport { getImageLinkFromUID } from '../helpers/file'\nimport { LogOut } from '../reducers/index'\n\nclass AuthService {\n  static CURRENT_USER_SESSION_KEY = 'CURRENT_USER_SESSION_KEY'\n  static DEVICE_TOKEN_KEY = 'DEVICE_TOKEN_KEY'\n\n  async init() {\n    await ConnectyCube.init(...appConfig.connectyCubeConfig)\n    return this.autologin()\n  }\n\n  async autologin() {\n    const checkUserSessionFromStore = await this.getUserSession()\n    if (checkUserSessionFromStore) {\n      const data = JSON.parse(checkUserSessionFromStore)\n      await this.signIn({ login: data.login, password: data.password })\n      return 'home'\n    } else { return 'auth' }\n  }\n\n  async signIn(params) {\n    const session = await ConnectyCube.createSession(params)\n    const currentUser = new User(session.user)\n    session.user.avatar = getImageLinkFromUID(session.user.avatar)\n    // work around\n    session.user.full_name = session.user.login\n    store.dispatch(setCurrentUser(session))\n    const customSession = Object.assign({}, currentUser, { password: params.password })\n    this.setUserSession(customSession)\n    this.connect(customSession.id, customSession.password)\n  }\n\n  async signUp(params) {\n    await ConnectyCube.createSession()\n    await ConnectyCube.users.signup(params)\n    return this.signIn(params)\n  }\n\n  async connect(userId, password) {\n    await ConnectyCube.chat.connect({ userId, password })\n  }\n\n  setUserSession(userSession) {\n    return localStorage.setItem(AuthService.CURRENT_USER_SESSION_KEY, JSON.stringify(userSession))\n  }\n\n  getUserSession() {\n    return localStorage.getItem(AuthService.CURRENT_USER_SESSION_KEY)\n  }\n\n  async logout() {\n    localStorage.clear()\n    await ConnectyCube.logout()\n    store.dispatch(LogOut())\n  }\n\n\n}\n\nconst authService = new AuthService()\n\nObject.freeze(authService)\n\nexport default authService","import React, { Component } from 'react'\nimport './loader.css'\n\nexport default class Loader extends Component {\n  render() {\n    return (\n      <div className=\"container-loader\">\n        <div className=\"loader\"></div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport AuthService from '../../services/auth-service'\nimport logo from '../../assets/logo_with_text.png'\nimport swal from 'sweetalert'\nimport './auth.css'\nimport Loader from '../../helpers/loader/loader'\nimport { Redirect } from \"react-router-dom\"\n\n\nexport default class Auth extends Component {\n  state = {\n    isLogin: true,\n    isLoader: false,\n    full_name: '',\n    login: '',\n    password: '',\n    isAuthorization: false\n  }\n\n  handleStateModal = () => {\n    return this.setState(\n      { isLogin: !this.state.isLogin }\n    )\n  }\n\n  changeName = (event) => (this.setState({ full_name: event.target.value }))\n\n  changeLogin = (event) => (this.setState({ login: event.target.value }))\n\n  changePassword = (event) => (this.setState({ password: event.target.value }))\n\n  login = (e) => {\n    e.preventDefault()\n    const { login, password, full_name, isLogin } = this.state\n    const dataUser = { login, password }\n\n    if (!login.trim() || !password.trim() || !isLogin && !full_name.trim()) {\n      const endMessage = isLogin ? 'login.' : 'sign up'\n      swal('Warning', `Fill the fields to ${endMessage}`)\n      return\n    }\n\n    this.setState({ isLoader: true })\n\n    if (isLogin) {\n      AuthService.signIn(dataUser)\n        .then(() => {\n          this.setState({ isLoader: false, isAuthorization: true })\n        })\n        .catch(error => {\n          this.setState({ isLoader: false })\n          swal(`Error.\\n\\n${JSON.stringify(error)}`, \"\", \"error\")\n        })\n    } else {\n      dataUser.full_name = full_name\n      AuthService.signUp(dataUser)\n        .then(() => {\n          this.setState({ isLoader: false, isAuthorization: true })\n          swal(\"Account successfully registered!\", \"\", \"success\")\n        })\n        .catch(error => {\n          this.setState({ isLoader: false })\n          swal(`Error.\\n\\n${JSON.stringify(error)}`, \"\", \"error\")\n        }\n        )\n    }\n\n  }\n\n  render() {\n    const { isLogin, login, password, isLoader, isAuthorization, full_name } = this.state\n    const authText = isLogin ? \"Don't have an account?\" : 'Already have an account?'\n    const authLink = isLogin ? 'Sign up' : 'Sign in'\n\n    return (\n      <div className=\"auth-main-сontainer\" style={this.props.isSmallDevice && { backgroundColor: '#27ae60' }}>\n        <div className=\"auth-modal-container\" style={isLogin ? { height: '500px' } : { height: '570px' }}>\n          {isLoader &&\n            <div className=\"auth-wrapp-loader\">\n              <Loader />\n            </div>\n          }\n          {isAuthorization &&\n            <Redirect to=\"/home\" />\n          }\n          <div className=\"auth-logo\">\n                    <p align=\"center\">Hardik&Rishika's</p>\n                    <p align=\"center\" id=\"clb\">Colab</p>\n                </div>\n                <p id=\"separator\"></p>\n          <form onSubmit={this.login} className=\"auth-form auth-wrapper\">\n            {!isLogin &&\n              <input\n                type=\"text\"\n                value={full_name}\n                onChange={this.changeName}\n                required\n                placeholder=\"Name\"\n                name=\"Name\"\n              />\n            }\n            <input\n              type=\"text\"\n              value={login}\n              onChange={this.changeLogin}\n              required\n              placeholder=\"Login\"\n              name=\"login\" />\n            <input\n              type=\"password\"\n              value={password}\n              onChange={this.changePassword}\n              required\n              placeholder=\"Password\"\n              name=\"Password\" />\n            <button type=\"submit\" value=\"Submit\">{isLogin ? 'Log in' : 'Sign up'}</button>\n          </form>\n          <div className=\"auth-footer\">\n            <span>{authText}</span>\n            {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n            <a onClick={this.handleStateModal}>{authLink}</a>\n          </div>\n        </div>\n      </div >\n    )\n  }\n}\n\n","import React from 'react'\nimport './avatar.css'\n\nexport default function Avatar({ photo, name, size }) {\n  function randomizeColor() {\n    const colors = [\n      'blue',\n      'darkmagenta',\n      'fuchsia',\n      'gold',\n      'green',\n      'limegreen',\n      'navy',\n      'purple',\n      'red',\n      'skyblue'\n    ]\n\n    return colors[name.length % colors.length]\n  }\n\n  function getIconLabel() {\n    const words = name.split(' ')\n    return words.length > 1\n      ? `${words[0].slice(0, 1)}${words[1].slice(0, 1)}`\n      : name.slice(0, 2)\n  }\n\n  return (\n    photo ?\n      <div style={{ width: size, height: size }}>\n        <div style={{\n          width: size || '100%',\n          height: size || '100%',\n          borderRadius: '50%',\n          backgroundImage: `url(${photo})`,\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat'\n        }}>\n        </div>\n      </div> :\n      <div style={{ width: size, height: size }}>\n        <div className=\"avatar-as-icon\" style={{ backgroundColor: randomizeColor() }}>\n          <p style={{ fontSize: size / 2.4 }}>{getIconLabel().toUpperCase()}</p>\n        </div>\n      </div >\n  )\n}\n","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronDown } from '@fortawesome/free-solid-svg-icons'\nimport { faChevronUp } from '@fortawesome/free-solid-svg-icons'\nimport { connect } from 'react-redux'\nimport './userProfile.css'\nimport AuthService from '../../../../services/auth-service'\nimport Modal from 'react-modal'\nimport { Link } from \"react-router-dom\"\nimport Avatar from '../../../../helpers/avatar/avatar'\n\n\nclass UserProfile extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isModal: false\n    }\n  }\n\n  customStyles = {\n    content: {\n      top: '50%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      transform: 'translate(-50%, -50%)',\n      border: 'none',\n      padding: 0,\n    }\n  }\n\n  showMoreInformation = () => {\n    this.setState({ isModal: !this.state.isModal })\n  }\n\n  handleCloseModal = () => (this.setState({ isModal: false }))\n\n  logOut = () => {\n    AuthService.logout()\n  }\n\n  settings = () => {\n    alert(\"Coming soon\")\n    this.handleCloseModal()\n  }\n\n  render() {\n    const { isModal } = this.state\n    const { currentUser } = this.props\n    if (!currentUser) {\n      return <></>\n    }\n\n    const { user } = currentUser\n    return (\n      \n      <div className=\"user-rofile-container\">\n        <div className=\"user-profile-wrapper\">\n          <div className=\"user-profile-user-info\">\n            <div className=\"online\">\n              <Avatar photo={user.avatar} name={user.full_name} size={50} />\n            </div>\n            <span>{user.full_name}</span>\n          </div>\n          <div className=\"user-profile-icon\" id=\"user-profile-icon\" onClick={this.showMoreInformation}>\n            {isModal ?\n              <FontAwesomeIcon icon={faChevronUp} color={'white'} /> :\n              \n              <FontAwesomeIcon icon={faChevronDown} color={'#435f7a'} />\n            }\n          </div>\n        </div>\n        {isModal &&\n          <>\n            <Modal\n              isOpen={isModal}\n              onRequestClose={this.handleCloseModal}\n              ariaHideApp={false}\n              style={this.customStyles}\n              overlayClassName=\"Overlay-user-profile\"\n            />\n            <div className=\"user-profile-modal\">\n              <ul>\n                <li className=\"user-profile-user-more-info\">\n                  <Link\n                    to=\"/auth\"\n                    onClick={this.logOut}\n                    className=\"reset-user-profile\">Logout</Link>\n                </li>\n                \n              </ul>\n            </div>\n          </>\n        }\n      </div>\n    )\n  }\n}\n\n\nconst mapStateToProps = ({ currentUser }) => ({\n  currentUser\n})\n\nexport default connect(mapStateToProps)(UserProfile)\n","import { LayoutProvider } from \"recyclerlistview/web\"\nimport store from '../store'\n\nexport class DialogLayoutUtil {\n  static getDialogLayoutProvider(width) {\n    return new LayoutProvider(\n      () => {\n        return \"type\";\n      },\n      (type, dim) => {\n        dim.width = width;\n        dim.height = 75;\n      }\n    );\n  }\n}\n\n\nexport class ChatLayoutUtil {\n  static getChatLayoutProvider(props) {\n    const { width, dialogId, currentUserId } = props\n    const fontSize = 16\n    const lineHeight = 1.5\n    const delta = 20\n    const margin = 30\n    const maxWidth = new GetMaxWidthMsg(width)\n    let footer = 15\n\n    return new LayoutProvider(\n      (arr) => {\n        return arr;\n      },\n      (type, dim, index) => {\n        if (store.getState().messages[dialogId][index].attachment) {\n          // if send messages as attachment\n          dim.width = width\n          dim.height = 300\n          return\n        } else {\n          // if send messages as string\n          let maxWidthMsg\n          if (store.getState().messages[dialogId][index].sender_id === currentUserId) {\n            maxWidthMsg = maxWidth.currentSender\n          } else {\n            maxWidthMsg = maxWidth.otherSender\n          }\n\n          var fakeElem = document.createElement(\"canvas\")\n          var ctx = fakeElem.getContext(\"2d\")\n          ctx.font = `${fontSize}px 'Open Sans', sans-serif`\n          var txt = store.getState().messages[dialogId][index].body\n\n          const calcWidth = ctx.measureText(txt).width\n          const lines = Math.ceil(calcWidth / (maxWidthMsg - delta))\n\n          dim.width = width\n          dim.height = lines * lineHeight * fontSize + margin + footer\n        }\n      }\n    )\n  }\n}\n\nexport class GetMaxWidthMsg {\n  constructor(maxScrollWidth) {\n    if (maxScrollWidth < 550) {\n      this.currentSender = 300\n      this.otherSender = 250\n    }\n    if (maxScrollWidth > 550 && maxScrollWidth < 768) {\n      this.currentSender = 420\n      this.otherSender = 470\n    }\n    if (maxScrollWidth > 768 && maxScrollWidth < 960) {\n      this.currentSender = 450\n      this.otherSender = 500\n    }\n    if (maxScrollWidth > 960) {\n      this.currentSender = 650\n      this.otherSender = 600\n    }\n  }\n}","export default function lastDate({ lastDate, lastMessage, updatedDate }) {\n  const monthes = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n  const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n  const msgLastDate = lastMessage ? new Date(lastDate * 1000) : new Date(updatedDate)\n  const msgYear = msgLastDate.getFullYear()\n  const msgMonth = msgLastDate.getMonth()\n  const msgDate = msgLastDate.getDate()\n  const msgDay = msgLastDate.getDay()\n  const msgHours = msgLastDate.getHours()\n  const msgMinutes = msgLastDate.getMinutes()\n  const LastDate = new Date()\n  const curYear = LastDate.getFullYear()\n  const curMonth = LastDate.getMonth()\n  const curDate = LastDate.getDate()\n  const curDay = LastDate.getDay()\n\n  if (curYear > msgYear) {\n    return `${monthes[msgMonth]} ${msgDate}, ${msgYear}`\n  } else if (curMonth > msgMonth) {\n    return `${monthes[msgMonth]} ${msgDate}`\n  } else if (curDate > (msgDate + 6)) {\n    return `${monthes[msgMonth]} ${msgDate}`\n  } else if (curDay > msgDay) {\n    return `${days[msgDay]}`\n  } else {\n    return `${(msgHours > 9) ? msgHours : ('0' + msgHours)}:${(msgMinutes > 9) ? msgMinutes : ('0' + msgMinutes)}`\n  }\n}\n\nexport function getTime(dateSent) {\n  const date = dateSent ? new Date(dateSent * 1000) : new Date()\n  const hours = date.getHours()\n  const minutes = date.getMinutes()\n  return `${(hours > 9) ? hours : ('0' + hours)}:${(minutes > 9) ? minutes : ('0' + minutes)}`\n}","import React, { Component } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUserPlus } from '@fortawesome/free-solid-svg-icons'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\nimport { RecyclerListView, DataProvider } from \"recyclerlistview/web\"\nimport { connect } from 'react-redux'\nimport { DialogLayoutUtil } from '../../../../helpers/LayoutUtil'\nimport ChatService from '../../../../services/chat-service'\nimport Loader from '../../../../helpers/loader/loader'\nimport lastDate from '../../../../helpers/lastDate'\nimport Avatar from '../../../../helpers/avatar/avatar'\nimport './dialogs.css'\n\n\nclass Dialog extends Component {\n  scrollWidth = 0\n  scrollHeight = 0\n  listenerWindowSize = null\n  timer = null\n  allDialog = []\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isAlredy: false,\n      dataProvider: new DataProvider((r1, r2) => {\n        return r1 !== r2 || r1.unread_messages_count !== r2.unread_messages_count;\n      }),\n      layoutProvider: 0,\n      count: 20,\n      isLoader: true,\n      search: ''\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.handleResize)\n    this.scrollWidth = document.getElementById('dialog-info-container').clientWidth\n    this.scrollHeight = document.getElementById('dialog-info-container').clientHeight\n\n    ChatService.fetchDialogsFromServer().then((dialogs) => {\n      this.allDialog = dialogs\n      this.setState({\n        isAlredy: true,\n        isLoader: false,\n        layoutProvider: DialogLayoutUtil.getDialogLayoutProvider(this.scrollWidth),\n        dataProvider: this.state.dataProvider.cloneWithRows(dialogs),\n      })\n    })\n  }\n\n  componentDidUpdate(prevProps) {\n    const { dialogs } = this.props\n    if (this.props.dialogs !== prevProps.dialogs\n    ) {\n      this.allDialog = dialogs\n      this.setState({\n        layoutProvider: DialogLayoutUtil.getDialogLayoutProvider(this.scrollWidth),\n        dataProvider: this.state.dataProvider.cloneWithRows(dialogs),\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleResize)\n  }\n\n  handleResize = () => {\n    this.scrollWidth = document.getElementById('dialog-info-container').clientWidth\n    this.scrollHeight = document.getElementById('dialog-info-container').clientHeight\n    if (!this.timer) {\n      this.timer = setTimeout(() => {\n        clearTimeout(this.timer)\n        this.timer = null\n        this.setState({\n          isAlredy: true,\n          layoutProvider: DialogLayoutUtil.getDialogLayoutProvider(this.scrollWidth)\n        })\n      }, 500)\n    }\n  }\n\n  changeSearch = (event) => {\n    let dialogs = []\n    if (event.target.value === '') {\n      dialogs = this.allDialog\n    } else {\n      this.allDialog.forEach(elem => {\n        const str = elem.name.toUpperCase().includes(event.target.value.toUpperCase())\n        str && dialogs.push(elem)\n      })\n    }\n    this.setState({\n      search: event.target.value,\n      dataProvider: this.state.dataProvider.cloneWithRows(dialogs)\n    })\n  }\n\n  goToChat = (item) => {\n    const { router } = this.props\n    ChatService.setSelectDialog(item)\n    router('/home/chat')\n  }\n\n  createNewDialog = () => {\n    const { router } = this.props\n    router('/home/create-dialog')\n  }\n\n  _renderDialog = (type, item) => {\n    return (\n      <li onClick={() => this.goToChat(item)}>\n        <div className=\"dialog-wrap-avatar\">\n          <Avatar photo={item.photo} name={item.name} size={50} />\n        </div>\n        <div className=\"dialog-wrap-block\">\n          <div className=\"dialog-wrap-block-left\">\n            <h5>{item.name}</h5>\n            <span>{item.last_message === '' ? \"No messages yet\" : item.last_message}</span>\n          </div>\n          <div className=\"dialog-wrap-block-right\">\n            <p>{lastDate({\n              lastDate: item.last_message_date_sent,\n              lastMessage: item.last_message,\n              updatedDate: item.updated_date,\n            })}</p>\n            {item.unread_messages_count > 0 &&\n              <span>{item.unread_messages_count}</span>\n            }\n          </div>\n        </div>\n      </li>\n    )\n  }\n\n  render() {\n    const { isLoader, dataProvider, layoutProvider, search } = this.state\n    return (\n      <div className=\"dialog-container\" >\n        <button onClick={this.createNewDialog}>\n          <FontAwesomeIcon icon={faUserPlus} color={'#000000'} />\n          <span>New chat</span>\n        </button>\n        <div className=\"dialog-input-search\">\n          <div className=\"dialog-input-search-icon\">\n            <FontAwesomeIcon icon={faSearch} color={'#000000'} />\n          </div>\n          <input\n            className=\"input-field\"\n            type=\"text\"\n            value={search}\n            onChange={this.changeSearch}\n            required\n            placeholder=\"Search chats...\"\n            name=\"search\" />\n        </div>\n        <div className=\"dialog-info-container\" id=\"dialog-info-container\">\n          {isLoader ?\n            (\n              <div style={{ position: 'absolute', width: '100%', height: '100%' }}>\n                <Loader />\n              </div>\n            ) : dataProvider.length === 0 ?\n              <div className=\"dialog-no-chats\">\n                <h3>No chats yet</h3>\n              </div> : this.state.isAlredy ?\n                dataProvider._data.length > 0 ?\n                  <ul>\n                    {\n                      <RecyclerListView\n                        style={{ width: this.scrollWidth, height: this.scrollHeight }}\n                        dataProvider={dataProvider}\n                        layoutProvider={layoutProvider}\n                        rowRenderer={this._renderDialog}\n                      />\n                    }\n                  </ul> : <div className=\"dialog-no-chats\">\n                    <h3>No results</h3>\n                  </div> : null\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = ({ dialogs }) => ({\n  dialogs\n})\n\nexport default connect(mapStateToProps)(Dialog)","import React, { Component } from 'react'\nimport UserProfile from './userProfile/userProfile'\nimport Dialogs from './dialogs/dialogs'\nimport './sideBar.css'\n\nexport default class SideBar extends Component {\n  render() {\n    const { router } = this.props\n    return (\n      <div className=\"sidebar-container\">\n        <UserProfile />\n        <Dialogs router={router} />\n      </div>\n    )\n  }\n}\n\n","const createImage = url =>\r\n    new Promise((resolve, reject) => {\r\n        const image = new Image()\r\n        image.addEventListener('load', () => resolve(image))\r\n        image.addEventListener('error', error => reject(error))\r\n        image.setAttribute('crossOrigin', 'anonymous') // needed to avoid cross-origin issues on CodeSandbox\r\n        image.src = url\r\n    })\r\n\r\nfunction getRadianAngle(degreeValue) {\r\n    return (degreeValue * Math.PI) / 180\r\n}\r\n\r\n/**\r\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\r\n * @param {File} image - Image File url\r\n * @param {Object} pixelCrop - pixelCrop Object provided by react-easy-crop\r\n * @param {number} rotation - optional rotation parameter\r\n */\r\nexport default async function getCroppedImg(imageSrc, pixelCrop, rotation = 0) {\r\n    const image = await createImage(imageSrc)\r\n    const canvas = document.createElement('canvas')\r\n    const ctx = canvas.getContext('2d')\r\n\r\n    const maxSize = Math.max(image.width, image.height)\r\n    const safeArea = 2 * ((maxSize / 2) * Math.sqrt(2))\r\n\r\n    // set each dimensions to double largest dimension to allow for a safe area for the\r\n    // image to rotate in without being clipped by canvas context\r\n    canvas.width = safeArea\r\n    canvas.height = safeArea\r\n\r\n    // translate canvas context to a central location on image to allow rotating around the center.\r\n    ctx.translate(safeArea / 2, safeArea / 2)\r\n    ctx.rotate(getRadianAngle(rotation))\r\n    ctx.translate(-safeArea / 2, -safeArea / 2)\r\n\r\n    // draw rotated image and store data.\r\n    ctx.drawImage(\r\n        image,\r\n        safeArea / 2 - image.width*0.5 ,\r\n        safeArea / 2 - image.height * 0.5\r\n    )\r\n    const data = ctx.getImageData(0, 0, safeArea, safeArea)\r\n\r\n    // set canvas width to final desired crop size - this will clear existing context\r\n\r\n    // canvas.width = pixelCrop.width\r\n    // canvas.height = pixelCrop.height\r\n\r\n    // custom width and height\r\n    canvas.width = pixelCrop.width\r\n    canvas.height = pixelCrop.height \r\n\r\n\r\n    // paste generated rotate image with correct offsets for x,y crop values.\r\n    ctx.putImageData(\r\n        data,\r\n        0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x,\r\n        0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y\r\n    )\r\n\r\n    // As Base64 string\r\n    // return canvas.toDataURL('image/jpeg');\r\n\r\n\r\n    return new Promise(resolve => {\r\n        canvas.toBlob(file => {\r\n            const newFile = new File([file], \"filename.jpg\", { type: 'image/jpeg' })\r\n            const imageInfo = {\r\n                file: {\r\n                    size: file.size,\r\n                    type: file.type,\r\n                    file: newFile,\r\n                    name: 'img' + pixelCrop.width + 'x' + pixelCrop.height+'.jpg',\r\n                    public: false\r\n                },\r\n                link: {\r\n                    url: URL.createObjectURL(file)\r\n                }\r\n            }\r\n            resolve(imageInfo)\r\n        }, 'image/jpeg')\r\n    })\r\n}","import React, { Component } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCamera } from '@fortawesome/free-solid-svg-icons'\nimport { faPaperclip } from '@fortawesome/free-solid-svg-icons'\nimport Modal from 'react-modal'\nimport Cropper from 'react-easy-crop'\nimport getCroppedImg from './cropImage'\nimport './imagePicker.css'\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n   transform: 'translate(-50%, -50%)',\n    border: 'none',\n    padding: 0,\n    boxShadow: '2px 2px 25px 0px black'\n  }\n}\n\nexport default class ImagePicker extends Component {\n  croppedAreaPixels = null\n  cropedImage = null\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      image: '',\n      imageSrc: '',\n      crop: { x: 0, y: 0 },\n      zoom: 1,\n        isModal: false,\n        aspect: 16 / 9,\n\n    }\n  }\n\n  onCropChange = (crop) => {\n    this.setState({ crop })\n  }\n\n  onCropComplete = (croppedArea, croppedAreaPixels) => {\n    this.croppedAreaPixels = croppedAreaPixels\n  }\n\n  cropImage = async () => {\n    this.cropedImage = await getCroppedImg(this.state.imageSrc, this.croppedAreaPixels)\n    this.props.getImage(this.cropedImage.file)\n    this.handleCloseModal()\n  }\n\n  onZoomChange = zoom => {\n    this.setState({ zoom })\n  }\n\n  handleCloseModal = () => (this.setState({ isModal: false }))\n\n  handleOpenModal = () => (this.setState({ isModal: true }))\n\n  onImageChange = (event) => {\n    if (event.target.files && event.target.files[0]) {\n      this.setState({\n        imageSrc: URL.createObjectURL(event.target.files[0]),\n        isModal: true\n      })\n    }\n  }\n\n  _renderAvatarPicker = () => {\n    return (\n      <>\n        <div className=\"image-picker\">\n          <label htmlFor=\"file-upload\" className=\"custom-file-upload\" >\n            {this.cropedImage ?\n              <img src={this.cropedImage?.link.url} alt=\"groupPhoto\" style={{ width: '75vw', height: '75vh', borderRadius: '50%' }} /> :\n              <FontAwesomeIcon icon={faCamera} color={'black'} />\n            }\n          </label>\n          <input id=\"file-upload\" type=\"file\" onChange={this.onImageChange} />\n        </div>\n      </>\n    )\n  }\n\n  _renderAttachmentPicker = () => {\n    return (\n      <div className=\"image-picker-container\">\n        <label htmlFor=\"file-upload\" className=\"custom-file-upload-attachment\" >\n          <FontAwesomeIcon icon={faPaperclip} color={'#9aa8b5'} />\n        </label>\n        <input id=\"file-upload\" type=\"file\" onChange={this.onImageChange} />\n      </div>\n    )\n  }\n\n  render() {\n    const { pickAsAttachment } = this.props\n    const { isModal } = this.state\n    return (\n      <>\n        {pickAsAttachment ?\n          this._renderAttachmentPicker() :\n          this._renderAvatarPicker()\n        }\n        <Modal\n          isOpen={isModal}\n          onRequestClose={this.handleCloseModal}\n          ariaHideApp={false}\n          style={customStyles}\n          overlayClassName=\"Overlay\"\n        >\n          <>\n            <div className=\"image-crop-picker-header\">\n              <button onClick={this.cropImage}>Next</button>\n              <button onClick={this.handleCloseModal}>Cancel</button>\n            </div>\n            <div className=\"image-crop-picker-container\">\n                        <Cropper\n                            image={this.state.imageSrc}\n                            crop={this.state.crop}\n                            zoom={this.state.zoom}\n                            aspect={this.state.aspect}\n                            onCropChange={this.onCropChange}\n                            onCropComplete={this.onCropComplete}\n                            onZoomChange={this.onZoomChange}\n                        />\n            </div>\n          </>\n        </Modal>\n      </>\n\n    )\n  }\n\n}","import React, { PureComponent } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons'\nimport ImagePicker from '../../../../helpers/imagePicker/imagePicker'\nimport './chatInput.css'\n\nexport default class ChatInput extends PureComponent {\n  state = {\n    messageText: ''\n  }\n\n  changeMessage = event => (this.setState({ messageText: event.target.value }))\n\n  sendMessage = (e) => {\n    e.preventDefault()\n    this.props.sendMessageCallback(this.state.messageText)\n      .then(() => (this.setState({ messageText: '' })))\n      .catch(() => (this.setState({ messageText: '' })))\n  }\n\n  getImage = (image) => {\n    this.props.sendMessageCallback(this.state.messageText, image)\n      .then(() => (this.setState({ messageText: '' })))\n      .catch(() => (this.setState({ messageText: '' })))\n  }\n\n  render() {\n    const { messageText } = this.state\n    return (\n      <footer>\n        <form onSubmit={this.sendMessage}>\n          <input\n            type=\"text\"\n            value={messageText}\n            onChange={this.changeMessage}\n            placeholder=\"Message\"\n            name=\"search\" />\n          <div className=\"chat-attachment\">\n            <ImagePicker pickAsAttachment getImage={this.getImage} />\n          </div>\n          <button onClick={this.sendMessage}>\n            <FontAwesomeIcon icon={faPaperPlane} color={'white'} />\n          </button>\n        </form>\n      </footer>\n    );\n  }\n}\n","import ConnectyCube from 'connectycube'\nimport UserModel from '../models/user'\nimport store from '../store'\nimport { fetchUsers } from '../actions/users'\n\nclass UsersService {\n\n  async getUserById(id) {\n    ConnectyCube.users.get(id);\n    //console.log(\"user:\"+ ConnectyCube.users.get(id));\n  }\n\n  async getOccupants(ids) {\n    const users = this.getUsers\n    const currentUser = this.currentUser\n    let idsForFetch = []\n\n    // 140 system ID when a group is created through the admin panel\n    ids.forEach(elem => {\n      if (elem !== currentUser.id && !users[elem] && elem !== 140) {\n        idsForFetch.push(elem)\n      }\n    })\n    if (idsForFetch.length === 0) { return }\n    const usersFromServer = await ConnectyCube.users.get({\n      per_page: 100,\n      filter: {\n        field: 'id',\n        param: 'in',\n        value: idsForFetch,\n      },\n    })\n    const newUsers = usersFromServer.items.map(elem => {\n      return new UserModel(elem.user)\n    })\n    store.dispatch(fetchUsers(newUsers))\n  }\n\n\n  getUsersAvatar(ids) {\n    const currentUserId = this.currentUser\n    let userId = null\n    ids.forEach(elem => {\n      if (elem !== currentUserId.id) {\n        userId = elem\n      }\n    })\n    return store.getState().users[userId].avatar\n  }\n\n  async listUsersByFullName(name, usersIdsToIgnore = []) {\n    if (!usersIdsToIgnore) {\n      usersIdsToIgnore = [this.currentUser.id]\n    }\n    const allUsers = await ConnectyCube.users.get({ per_page: 100, full_name: name })\n    console.log(\"user:\"+ allUsers)\n    let contacts = []\n    allUsers.items.forEach(elem => {\n      if (!usersIdsToIgnore.includes(elem.user.id)) {\n        contacts.push(new UserModel(elem.user))\n      }\n    })\n    return contacts\n    return console.log(\"user: \",contacts);\n  }\n\n  get currentUser() {\n    return store.getState().currentUser.user\n  }\n\n  get getUsers() {\n    return store.getState().users\n  }\n}\n\nconst User = new UsersService()\n\nObject.freeze(User)\n\nexport default User\n\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faClock } from '@fortawesome/free-solid-svg-icons'\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\nimport { faCheckDouble } from '@fortawesome/free-solid-svg-icons'\n\nimport {\n  STATUS_DELIVERED,\n  STATUS_PENDING,\n  STATUS_READ,\n  STATUS_SENT\n} from '../../../../models/message'\n\nexport default function MessageSendState({ send_state }) {\n  switch (send_state) {\n    case STATUS_PENDING:\n      return (<FontAwesomeIcon icon={faClock} color={'white'} />)\n    case STATUS_SENT:\n      return (<FontAwesomeIcon icon={faCheck} color={'white'} />)\n    case STATUS_DELIVERED:\n      return (<FontAwesomeIcon icon={faCheckDouble} color={'white'} />)\n    case STATUS_READ:\n      return (<FontAwesomeIcon icon={faCheckDouble} color={'rgb(255, 0, 242)'} />)\n\n    default: return (<FontAwesomeIcon icon={faClock} color={'white'} />)\n  }\n}\n","import React, { Component } from 'react';\nimport { getTime } from '../../../../helpers/lastDate'\nimport Avatar from '../../../../helpers/avatar/avatar'\nimport { GetMaxWidthMsg } from '../../../../helpers/LayoutUtil'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons'\nimport MessageSendState from './messageStatus'\nimport Modal from 'react-modal'\nimport './message.css'\n\nexport default class Message extends Component {\n  // 1 - current & 2 - other\n  constructor(props) {\n    super(props)\n    this.state = {\n      isModal: false\n    }\n  }\n\n  selectedImg = null\n\n  customStyles = {\n    content: {\n      top: '50%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      transform: 'translate(-50%, -50%)',\n      border: 'none',\n      padding: 0,\n    }\n  }\n\n  _renderAsStr = (whoIsSender) => {\n    const { message } = this.props\n    if (whoIsSender === 1) {\n      return (\n        <>\n          <span style={{ wordWrap: 'break-word' }}>{message.body}</span>\n          <div className=\"chat-message-right-footer\">\n            <span>\n              <>\n                {getTime(message.date_sent)}\n              </>\n              <>\n                {<MessageSendState send_state={message.send_state} />}\n              </>\n            </span>\n          </div>\n        </>\n      )\n    } else {\n      return (\n        <>\n          <span style={{ wordWrap: 'break-word' }}>{message.body}</span>\n          <div className=\"chat-message-left-footer\">\n            <span>{getTime(message.date_sent)}</span>\n          </div>\n        </>\n      )\n    }\n  }\n\n  renderZoomImg = (event, message) => {\n    event.preventDefault()\n    this.selectedImg = message.attachment[0]\n    this.setState({ isModal: true })\n  }\n\n  handleCloseModal = () => this.setState({ isModal: false })\n\n  _renderAsAttachment = () => {\n    const { message, whoIsSender } = this.props\n    return (\n      <>\n        <div className=\"chat-message-container-attachment\">\n          <div style={{\n            backgroundImage: `url(${message.attachment[0].url})`,\n            backgroundPosition: 'center',\n            width: '100%',\n            height: '100%',\n            border: '1px solid #cbcbcb',\n            cursor: 'pointer'\n          }}\n            onClick={(e) => this.renderZoomImg(e, message)}\n          />\n        </div>\n        {whoIsSender === 1 ?\n          <div className=\"chat-message-right-footer\">\n            <span>\n              <>\n                {getTime(message.date_sent)}\n              </>\n              <>\n                {<MessageSendState send_state={message.send_state} />}\n              </>\n            </span>\n          </div> :\n          <div className=\"chat-message-left-footer\">\n            <span>{getTime(message.date_sent)}</span>\n          </div>\n        }\n      </>\n    )\n  }\n\n  render() {\n    const { message, whoIsSender, participantInfo, notRenderAvatar, widthScroll } = this.props\n    const { isModal } = this.state\n    const withMsg = new GetMaxWidthMsg(widthScroll)\n\n    return (\n      <>\n        {isModal &&\n          <Modal\n            isOpen={isModal}\n            onRequestClose={this.handleCloseModal}\n            ariaHideApp={false}\n            style={this.customStyles}\n            overlayClassName=\"overlay-chat-attachment\"\n          >\n            <div className=\"active-window-modal-attachment\">\n              <FontAwesomeIcon icon={faTimesCircle} color={'white'} onClick={this.handleCloseModal} />\n              <img\n                src={this.selectedImg.url}\n                width={this.selectedImg.width}\n                height={this.selectedImg.height}\n                alt=\"zoomImg\"\n              />\n            </div>\n          </Modal>\n        }\n        <div className=\"chat-message-layout\">\n          {whoIsSender === 1 ?\n            <div className=\"chat-message-wrap chat-message-wrap-right\">\n              <div style={{ maxWidth: `${withMsg.currentSender}px` }} className=\"chat-message-container-position-right\">\n                {message.attachment ?\n                  this._renderAsAttachment(1) :\n                  this._renderAsStr(1)\n                }\n              </div>\n            </div> :\n            <div className=\"chat-message-wrap chat-message-wrap-left\">\n              <div className=\"chat-message-avatar\">\n                {notRenderAvatar &&\n                  <Avatar photo={participantInfo.avatar} name={participantInfo.name || participantInfo.full_name} size={30} />\n                }\n              </div>\n              <div style={{ maxWidth: `${message.attachment ? withMsg.otherSender + 60 : withMsg.otherSender}px` }} className=\"chat-message-container-position-left\">\n                {message.attachment ?\n                  this._renderAsAttachment(2) :\n                  this._renderAsStr(2)\n                }\n              </div>\n            </div>\n          }\n        </div>\n      </>\n    )\n  }\n}\n\n","import React, { PureComponent } from 'react'\nimport Avatar from '../../../helpers/avatar/avatar'\nimport ChatInput from './chatInput/chatInput'\nimport { connect } from 'react-redux'\nimport ChatService from '../../../services/chat-service'\nimport UsersService from '../../../services/users-service'\nimport { RecyclerListView, DataProvider } from \"recyclerlistview/web\"\nimport { ChatLayoutUtil } from '../../../helpers/LayoutUtil'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport store from '../../../store'\nimport Loader from '../../../helpers/loader/loader'\nimport { faChevronLeft } from '@fortawesome/free-solid-svg-icons'\nimport Message from './message/message'\n\nimport './chat.css'\n\nclass Chat extends PureComponent {\n  scrollWidth = 0\n  scrollHeight = 0\n  listenerWindowSize = null\n  timer = null\n  isFetchingMsg = false\n  messagesListRef = null\n  listenerLazyLoad = false\n  needToGetMoreMessage = null\n\n\n  recycler_Y = 0\n  contentHeight = 0\n  contentNewOffset = 0\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isAlredy: true,\n      dataProvider: new DataProvider((r1, r2) => {\n        return r1 !== r2 || r1.send_state !== r2.send_state\n      }),\n      layoutProvider: []\n    }\n    this.currentUserInfo = store.getState().currentUser.user\n  }\n\n\n  lazyLoadMessages = (elem, y) => {\n    this.recycler_Y = y\n    this.contentHeight = elem.nativeEvent.contentSize.height\n    if (this.listenerLazyLoad && this.needToGetMoreMessage && y < 2000) {\n      this.listenerLazyLoad = false\n      ChatService.getMoreMessages(this.props.selectedDialog)\n        .then(amountMessages => {\n          amountMessages === 100 ? this.needToGetMoreMessage = true : this.needToGetMoreMessage = false\n          this.listenerLazyLoad = true\n        })\n    }\n  }\n\n  getDialogInfo = async () => {\n    const dialog = ChatService.getDialogById(this.props.selectedDialog.id)\n\n    // get info about occupants\n    await UsersService.getOccupants(dialog.occupants_ids)\n\n    ChatService.getMessages(dialog)\n      .catch(e => alert(`Error.\\n\\n${JSON.stringify(e)}`))\n      .then(amountMessages => {\n        amountMessages === 100 ? this.needToGetMoreMessage = true : this.needToGetMoreMessage = false\n        this.setState({\n          isFetchingMsg: true,\n          layoutProvider: ChatLayoutUtil.getChatLayoutProvider({\n            width: this.scrollWidth,\n            dialogId: dialog.id,\n            currentUserId: this.currentUserInfo.id\n          }),\n          dataProvider: this.state.dataProvider.cloneWithRows(this.props.messages[dialog.id])\n        })\n        this.scrollToBottom()\n        this.listenerLazyLoad = true\n      })\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.handleResize)\n    this.scrollWidth = document.getElementById('chat-body').clientWidth\n    this.scrollHeight = document.getElementById('chat-body').clientHeight\n    this.getDialogInfo()\n  }\n\n  componentDidUpdate(prewProps) {\n    const dialog = ChatService.getDialogById(this.props.selectedDialog.id)\n\n    if (prewProps.messages[dialog.id] &&\n      prewProps.messages[dialog.id] !== this.props.messages[dialog.id]\n    ) {\n      console.log('{chat} prew props', prewProps.messages[dialog.id])\n      console.log('{chat} this props', this.props.messages[dialog.id])\n\n      if (this.props.messages[dialog.id].length) {\n        this.setState({\n          dataProvider: this.state.dataProvider.cloneWithRows(this.props.messages[dialog.id])\n        }, () => { this.updateScrollPosition() }\n        )\n      }\n    }\n  }\n\n  updateScrollPosition = () => {\n    setTimeout(() => {\n      const getElement = document.getElementById('chat-body').children[0].children[0].children[0].style.height\n      const fullScrollHeight = getElement.slice(0, getElement.length - 2)\n      const newOffset = this.recycler_Y + (fullScrollHeight - this.contentHeight)\n      this.messagesListRef.scrollToOffset(0, newOffset)\n    }, 100)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleResize)\n  }\n\n  handleResize = () => {\n    this.scrollWidth = document.getElementById('chat-body').clientWidth\n    this.scrollHeight = document.getElementById('chat-body').clientHeight\n    if (!this.timer) {\n      const dialog = ChatService.getDialogById(this.props.selectedDialog.id)\n      this.timer = setTimeout(() => {\n        clearTimeout(this.timer)\n        this.timer = null\n        this.setState({\n          isAlredy: true,\n          layoutProvider: ChatLayoutUtil.getChatLayoutProvider({\n            width: this.scrollWidth,\n            dialogId: dialog.id,\n            currentUserId: this.currentUserInfo.id\n          })\n        })\n      }, 500)\n    }\n  }\n\n  sendMessageCallback = async (messageText, img) => {\n    const dialog = ChatService.getDialogById(this.props.selectedDialog.id)\n    if (messageText.length <= 0 && !img) return\n    await ChatService.sendMessage(dialog, messageText, img, this.scrollToBottom)\n  }\n\n  goToSplashPage = () => {\n    const { router } = this.props\n    router('/home')\n  }\n\n  _renderMessage = (type, item) => {\n    const { users } = this.props\n    // 1 - current sender & 2 - other sender\n    const whoIsSender = this.currentUserInfo.id === item.sender_id ? 1 : 2\n    const participantInfo = whoIsSender === 2 ? users[item.sender_id] : null\n    let notRenderAvatar = null\n\n    if (type > 0 && whoIsSender !== 1 &&\n      +this.state.dataProvider._data[type - 1].sender_id !== +item.sender_id) {\n      notRenderAvatar = true\n    }\n\n    return (\n      <Message\n        whoIsSender={whoIsSender}\n        message={item}\n        participantInfo={participantInfo}\n        notRenderAvatar={notRenderAvatar}\n        widthScroll={this.scrollWidth}\n      />\n    )\n  }\n\n  getDialogById = () => {\n    return ChatService.getDialogById(this.props.selectedDialog.id)\n  }\n\n  scrollToBottom = () => {\n    if (this.messagesListRef) {\n      this.messagesListRef.scrollToIndex(this.state.dataProvider._data.length - 1, false)\n    }\n  }\n\n  render() {\n    const { dataProvider, layoutProvider, isAlredy, isFetchingMsg } = this.state\n    const { selectedDialog } = this.props\n    let currentDialog\n\n    if (selectedDialog) {\n      currentDialog = this.getDialogById()\n    }\n\n    return (\n      <div className=\"chat-container\" >\n        <header>\n          {window.innerWidth < 768 &&\n            <button onClick={this.goToSplashPage}>\n              <FontAwesomeIcon icon={faChevronLeft} color={'#212529'} />\n              Back\n            </button>\n          }\n          <Avatar photo={currentDialog.photo} name={currentDialog.name} size={50} />\n          <h3>{currentDialog.name}</h3>\n        </header>\n        <div className=\"chat-body\" id=\"chat-body\">\n          {isAlredy && isFetchingMsg ?\n            dataProvider._data.length > 0 &&\n            <>\n              <RecyclerListView\n                style={{\n                  width: this.scrollWidth,\n                  height: this.scrollHeight,\n                }}\n                ref={ref => this.messagesListRef = ref}\n                dataProvider={dataProvider}\n                layoutProvider={layoutProvider}\n                rowRenderer={this._renderMessage}\n                onScroll={(elem, x, y) => {\n                  this.lazyLoadMessages(elem, y)\n                }}\n              />\n            </> : <Loader />\n          }\n        </div>\n        <ChatInput sendMessageCallback={this.sendMessageCallback} />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = ({ selectedDialog, messages, users }) => ({\n  selectedDialog,\n  messages,\n  users\n})\n\nexport default connect(mapStateToProps)(Chat)","import React from 'react'\nimport './splashPage.css'\n\nexport default function SplashPage() {\n  return (\n    <div className=\"splash-page-container\">    \n      <p>Please select a chat to start messaging</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronLeft } from '@fortawesome/free-solid-svg-icons'\nimport './header.css'\n\nexport default function createDialogHeader({ router }) {\n  function goToSplashPage() {\n    router('/home/')\n  }\n  return (\n    <div className=\"create-dialog-header\">\n      <button onClick={goToSplashPage}>\n        <FontAwesomeIcon icon={faChevronLeft} color={'black'} />\n        <span>Back</span>\n      </button>\n    </div>\n  )\n}","import React, { PureComponent } from 'react'\nimport Avatar from '../../../../helpers/avatar/avatar'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faDotCircle } from '@fortawesome/free-solid-svg-icons'\nimport { faCheckCircle } from '@fortawesome/free-solid-svg-icons'\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons'\nimport './renderUser.css'\n\nexport default class User extends PureComponent {\n  state = {\n    isSelectedUser: false\n  }\n\n  toggleUserSelect() {\n    const { selectUsers, user } = this.props\n    selectUsers(user)\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.selectedUsers !== this.props.selectedUsers) {\n      this.setState({ isSelectedUser: this.props.selectedUsers })\n    }\n  }\n\n  render() {\n    const { user, selectedUsers, dialogType } = this.props\n    const { isSelectedUser } = this.state\n    return (\n      <div className=\"render-search-user\" onClick={() => this.toggleUserSelect()}>\n        <div className=\"render-search-user-info\">\n          <Avatar photo={user.avatar} name={user.full_name} size={40} />\n          <span>{user.full_name}</span>\n        </div>\n        {dialogType ? isSelectedUser || selectedUsers ? (\n          <FontAwesomeIcon icon={faCheckCircle} color={'green'} />\n        ) : (\n            <FontAwesomeIcon icon={faDotCircle} color={'black'} />\n          ) : <FontAwesomeIcon icon={faArrowRight} color={'green'} />\n        }\n      </div>\n    )\n  }\n}\n\n","import React, { PureComponent } from 'react';\nimport CreateDialogHeader from './createDialogHeader/header'\nimport ImagePicker from '../../../helpers/imagePicker/imagePicker'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUser } from '@fortawesome/free-solid-svg-icons'\nimport { faUsers } from '@fortawesome/free-solid-svg-icons'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons'\nimport UsersService from '../../../services/users-service'\nimport ChatService from '../../../services/chat-service'\nimport Loader from '../../../helpers/loader/loader'\nimport swal from 'sweetalert'\nimport Avatar from '../../../helpers/avatar/avatar'\n\nimport RenderUser from './renderUser/renderUser'\n\nimport './createDialog.css'\n\nexport default class CreateDialog extends PureComponent {\n  listUsers = []\n  userNotFound = false\n  selectedUsers = []\n  isGroupDetails = false\n  image = null\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      keyword: '',\n      isLoader: false,\n      dialogType: false,\n      dialogName: '',\n      isUpdate: false,\n    }\n  }\n\n  toggleUserSelect = (user) => {\n    let newArr = []\n    this.selectedUsers.forEach(elem => {\n      if (elem.id !== user.id) {\n        newArr.push(elem)\n      }\n    })\n    this.selectedUsers = newArr\n    this.setState({ isUpdate: !this.state.isUpdate })\n  }\n\n  getImage = (image) => {\n    this.image = image\n  }\n\n  createDialog = () => {\n    let str = this.state.dialogName.trim()\n    const { router } = this.props\n\n    if (str.length < 3) {\n      return swal('Warning', 'Enter more than 4 characters for group subject')\n    }\n    this.setState({ isLoader: true })\n    const occupants_ids = this.selectedUsers.map(elem => {\n      return elem.id\n    })\n    ChatService.createPublicDialog(occupants_ids, str, this.image)\n      .then((newDialog) => {\n        this.setState({ isLoader: false })\n        ChatService.setSelectDialog(newDialog)\n        ChatService.sendChatAlertOnCreate(newDialog)\n        router('/home/chat')\n      })\n      .catch((error) => {\n        this.setState({ isLoader: false })\n        swal('Error', error)\n      })\n  }\n\n  searchUsers = (e) => {\n    e.preventDefault()\n    const { keyword } = this.state\n    let str = keyword.trim()\n    if (str.length > 2) {\n      this.setState({ isLoader: true })\n      UsersService.listUsersByFullName(str)\n        .then(users => {\n          this.listUsers = users\n          this.userNotFound = false\n          this.setState({ isLoader: false })\n        })\n        .catch(() => {\n          this.userNotFound = true\n          this.setState({ isLoader: false })\n        })\n    } else {\n      swal('Warning', `Enter more than 3 characters`)\n    }\n  }\n\n  changeTypeDialog = () => {\n    this.selectedUsers = []\n    this.setState({ dialogType: !this.state.dialogType })\n  }\n\n  selectUsers = (user) => {\n    const { router } = this.props\n\n    // False - Private dialog \n    if (!this.state.dialogType) {\n      return ChatService.createPrivateDialog(user.id)\n        .then((newDialog) => {\n          ChatService.setSelectDialog(newDialog)\n          ChatService.sendChatAlertOnCreate(newDialog)\n          router('/home/chat')\n        })\n        .catch((error) => {\n          this.setState({ isLoader: false })\n          swal('Error', error)\n        })\n    }\n\n    // True - Publick dialog \n    const userSelect = this.selectedUsers.find(elem => elem.id === user.id)\n    if (userSelect) {\n      let newArr = []\n      this.selectedUsers.forEach(elem => {\n        if (elem.id !== user.id) {\n          newArr.push(elem)\n        }\n      })\n      this.selectedUsers = newArr\n    } else {\n      if (this.selectedUsers.length === 9) {\n        swal('Warning', `Maximum 9 participants`)\n        return\n      }\n      this.selectedUsers.push(user)\n    }\n    this.setState({ isUpdate: !this.state.isUpdate })\n  }\n\n  _renderUser = (item) => {\n    const isSelected = this.selectedUsers.find(elem => elem.id === item.id)\n    return (\n      <RenderUser\n        user={item}\n        selectUsers={this.selectUsers}\n        dialogType={this.state.dialogType}\n        selectedUsers={isSelected ? true : false}\n        key={item.id}\n      />\n    )\n  }\n\n  changeSearch = (event) => (this.setState({ keyword: event.target.value }))\n\n  changeDialogName = (event) => (this.setState({ dialogName: event.target.value }))\n\n  _renderSelectedUsers = (elem) => {\n    return (\n      <button\n        key={elem.id}\n        className=\"create-dialog-body-selected-avatar\"\n        onClick={() => this.toggleUserSelect(elem)}\n      >\n        <Avatar\n          photo={elem.avatar}\n          name={elem.full_name}\n          size={40}\n        />\n        <FontAwesomeIcon icon={faTimesCircle} color={'grey'} />\n      </button>\n    )\n  }\n\n  render() {\n    const { router } = this.props\n    const { keyword, dialogType, isLoader, dialogName } = this.state\n    const renderHeader = window.innerWidth < 768 ? 0 : 50\n    const calHeight = dialogType ? 470 - renderHeader : 390 - renderHeader\n\n    return (\n      <div className=\"create-dialog-container\">\n        {window.innerWidth < 768 &&\n          <CreateDialogHeader router={router} />\n        }\n        {isLoader &&\n          <div style={{ position: 'absolute', width: '100%', height: '100%' }}>\n            <Loader />\n          </div>\n        }\n        <div className=\"create-dialog-body\">\n          <div className=\"create-dialog-body-groupinfo\">\n            <ImagePicker getImage={this.getImage} />\n            <input\n              type=\"text\"\n              placeholder=\"Group Subject\"\n              value={dialogName}\n              onChange={this.changeDialogName} />\n          </div>\n          <form className=\"create-dialog-body-search\" onSubmit={this.searchUsers}>\n            <input\n              type=\"text\"\n              value={keyword}\n              onChange={this.changeSearch}\n              required\n              placeholder=\"Type contact name\"\n              name=\"search\" />\n            <button onClick={this.searchUsers}>\n              <FontAwesomeIcon icon={faSearch} color={'white'} />\n            </button>\n          </form>\n\n          <div className=\"create-dialog-body-type-dialog\">\n            <button onClick={this.changeTypeDialog}>\n              {dialogType ? <FontAwesomeIcon icon={faUsers} color={'#27ae60'} /> :\n                <FontAwesomeIcon icon={faUser} color={'#27ae60'} />\n              }\n              <span>{dialogType ? `Create private chat` : `Create group chat`}</span>\n            </button>\n          </div>\n\n          {dialogType && this.selectedUsers.length > 0 &&\n            <div className=\"create-dialog-body-selected-users\">\n              {this.selectedUsers.map(elem => (\n                this._renderSelectedUsers(elem)\n              ))\n              }\n            </div>\n          }\n\n          {this.userNotFound ?\n            <h5>Couldn't find user</h5> :\n            <div className=\"create-dialog-body-users\" style={{ height: `calc(100vh - ${calHeight}px)` }}>\n              {\n                this.listUsers.map((elem) => {\n                  return (\n                    this._renderUser(elem)\n                  )\n                })\n              }\n            </div>\n          }\n\n          {this.selectedUsers.length > 0 &&\n            <div className=\"create-dialog-body-btn\">\n              <button onClick={this.createDialog}>Create grup</button>\n            </div>\n          }\n        </div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport { Route, Redirect, BrowserRouter as Router } from \"react-router-dom\"\nimport ChatService from '../../services/chat-service'\nimport SideBar from './sideBar/sideBar'\nimport Chat from './chat/chat'\nimport SplashPage from './splashPage/splashPage'\nimport CreateDialog from './createDialog/createDialog'\nimport Auth from '../auth/auth'\nimport './home.css'\n\n\nexport default class Home extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      routName: false,\n      routerUrl: props.match.url\n    }\n    props.history.replace(\"/home\")\n    this.windowWidth = window.innerWidth\n  }\n\n  componentDidMount() {\n    ChatService.setUpListeners()\n  }\n\n  changeRouter = (router) => {\n    this.setState({ routerUrl: router })\n  }\n\n  render() {\n    const { routerUrl } = this.state\n    const { match } = this.props\n\n    return (\n      <div className=\"home-frame\">\n        <div className=\"home-active-container\">\n          {this.windowWidth >= 768 ?\n            <Row className=\"default-row\">\n              <Col sm={12} md={5} lg={5} xl={3} className=\"default-grid\">\n                <SideBar router={this.changeRouter} />\n              </Col>\n              <Col sm={12} md={7} lg={7} xl={9} className=\"default-grid\">\n                <Router>\n                  <Route\n                    exact\n                    path={`${match.url}`}\n                    component={SplashPage}\n                  />\n                  <Route\n                    path={`${match.url}/create-dialog`}\n                    component={() => <CreateDialog router={this.changeRouter} />}\n                  />\n                  <Route\n                    path={`${match.url}/chat`}\n                    component={() => <Chat router={this.changeRouter} />}\n                  />\n                  <Redirect to={routerUrl} />\n                </Router>\n              </Col>\n            </Row> :\n\n            <Row>\n              <Col sm={12} md={5} lg={5} xl={3} className=\"default-grid\">\n                <Router>\n                  <Route\n                    exact\n                    path={`${match.url}`}\n                    component={() => <SideBar router={this.changeRouter} />}\n                  />\n                  <Route\n                    path={`${match.url}/create-dialog`}\n                    component={() => <CreateDialog router={this.changeRouter} />}\n                  />\n                  <Route\n                    path={`${match.url}/chat`}\n                    component={() => <Chat router={this.changeRouter} />}\n                  />\n                  <Route\n                    path={`/auth`}\n                    component={() => <Auth isSmallDevice />}\n                  />\n                  <Redirect to={routerUrl} />\n                </Router>\n              </Col>\n            </Row>\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\n","import React, { Component } from 'react'\nimport { Provider } from 'react-redux'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect\n} from \"react-router-dom\"\nimport ChatService from '../services/chat-service'\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport store from '../store'\nimport AuthService from '../services/auth-service'\nimport Auth from './auth/auth'\nimport Home from './home/home'\nimport Loader from '../helpers/loader/loader'\n\n\nexport default class Main extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      routName: false,\n      isLoader: true\n    }\n    this.initUser()\n  }\n\n  initUser = async () => {\n    const routLink = await AuthService.init()\n    this.setState({ routName: routLink, isLoader: false })\n  }\n\n  render() {\n    const { routName, isLoader } = this.state\n    return (\n\n      <Router>\n        <Provider store={store}>\n          {isLoader ?\n            <div style={{ position: 'absolute', width: '100%', height: '100%' }}>\n              <Loader />\n            </div>\n            : <>\n              <Route path=\"/home\" component={Home} />\n              <Route path=\"/auth\" component={Auth} />\n              <Redirect to={routName} />\n            </>\n          }\n        </Provider>\n      </Router>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Main from './components/main'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<Main />, document.getElementById('root'))\n\nserviceWorker.unregister()"],"sourceRoot":""}